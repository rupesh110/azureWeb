{"version":3,"file":"azure-functions.min.js","mappings":"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","sources":["webpack://@azure/functions/./src/InvocationContext.ts","webpack://@azure/functions/./src/InvocationModel.ts","webpack://@azure/functions/./src/addBindingName.ts","webpack://@azure/functions/./src/app.ts","webpack://@azure/functions/./src/constants.ts","webpack://@azure/functions/./src/converters/fromRpcBindings.ts","webpack://@azure/functions/./src/converters/fromRpcContext.ts","webpack://@azure/functions/./src/converters/fromRpcNullable.ts","webpack://@azure/functions/./src/converters/fromRpcTriggerMetadata.ts","webpack://@azure/functions/./src/converters/fromRpcTypedData.ts","webpack://@azure/functions/./src/converters/toCamelCase.ts","webpack://@azure/functions/./src/converters/toRpcDuration.ts","webpack://@azure/functions/./src/converters/toRpcHttp.ts","webpack://@azure/functions/./src/converters/toRpcHttpCookie.ts","webpack://@azure/functions/./src/converters/toRpcNullable.ts","webpack://@azure/functions/./src/converters/toRpcTypedData.ts","webpack://@azure/functions/./src/errors.ts","webpack://@azure/functions/./src/hooks/AppStartContext.ts","webpack://@azure/functions/./src/hooks/AppTerminateContext.ts","webpack://@azure/functions/./src/hooks/HookContext.ts","webpack://@azure/functions/./src/hooks/InvocationHookContext.ts","webpack://@azure/functions/./src/hooks/PostInvocationContext.ts","webpack://@azure/functions/./src/hooks/PreInvocationContext.ts","webpack://@azure/functions/./src/hooks/registerHook.ts","webpack://@azure/functions/./src/http/HttpRequest.ts","webpack://@azure/functions/./src/http/HttpResponse.ts","webpack://@azure/functions/./src/http/extractHttpUserFromHeaders.ts","webpack://@azure/functions/./src/input.ts","webpack://@azure/functions/./src/output.ts","webpack://@azure/functions/./src/trigger.ts","webpack://@azure/functions/./src/utils/Disposable.ts","webpack://@azure/functions/./src/utils/isTrigger.ts","webpack://@azure/functions/./src/utils/nonNull.ts","webpack://@azure/functions/./src/utils/tryGetCoreApiLazy.ts","webpack://@azure/functions/external commonjs2 \"@azure/functions-core\"","webpack://@azure/functions/external commonjs2 \"undici\"","webpack://@azure/functions/external commonjs2 \"url\"","webpack://@azure/functions/external commonjs2 \"util\"","webpack://@azure/functions/webpack/bootstrap","webpack://@azure/functions/./src/index.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport {\r\n    EffectiveFunctionOptions,\r\n    InvocationContextInit,\r\n    LogHandler,\r\n    RetryContext,\r\n    TraceContext,\r\n    TriggerMetadata,\r\n} from '@azure/functions';\r\n\r\nexport class InvocationContext implements types.InvocationContext {\r\n    invocationId: string;\r\n    functionName: string;\r\n    extraInputs: InvocationContextExtraInputs;\r\n    extraOutputs: InvocationContextExtraOutputs;\r\n    retryContext?: RetryContext;\r\n    traceContext?: TraceContext;\r\n    triggerMetadata?: TriggerMetadata;\r\n    options: EffectiveFunctionOptions;\r\n    #userLogHandler: LogHandler;\r\n\r\n    constructor(init?: InvocationContextInit) {\r\n        init = init || {};\r\n        const fallbackString = 'unknown';\r\n        this.invocationId = init.invocationId || fallbackString;\r\n        this.functionName = init.functionName || fallbackString;\r\n        this.extraInputs = new InvocationContextExtraInputs();\r\n        this.extraOutputs = new InvocationContextExtraOutputs();\r\n        this.retryContext = init.retryContext;\r\n        this.traceContext = init.traceContext;\r\n        this.triggerMetadata = init.triggerMetadata;\r\n        this.options = {\r\n            trigger: init.options?.trigger || {\r\n                name: fallbackString,\r\n                type: fallbackString,\r\n            },\r\n            return: init.options?.return,\r\n            extraInputs: init.options?.extraInputs || [],\r\n            extraOutputs: init.options?.extraOutputs || [],\r\n        };\r\n        this.#userLogHandler = init.logHandler || fallbackLogHandler;\r\n    }\r\n\r\n    log(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    trace(...args: unknown[]): void {\r\n        this.#userLogHandler('trace', ...args);\r\n    }\r\n\r\n    debug(...args: unknown[]): void {\r\n        this.#userLogHandler('debug', ...args);\r\n    }\r\n\r\n    info(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    warn(...args: unknown[]): void {\r\n        this.#userLogHandler('warning', ...args);\r\n    }\r\n\r\n    error(...args: unknown[]): void {\r\n        this.#userLogHandler('error', ...args);\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraInputs implements types.InvocationContextExtraInputs {\r\n    #inputs: Record<string, unknown> = {};\r\n    get(inputOrName: types.FunctionInput | string): any {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        return this.#inputs[name];\r\n    }\r\n    set(inputOrName: types.FunctionInput | string, value: unknown): void {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        this.#inputs[name] = value;\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraOutputs implements types.InvocationContextExtraOutputs {\r\n    #outputs: Record<string, unknown> = {};\r\n    get(outputOrName: types.FunctionOutput | string): unknown {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        return this.#outputs[name];\r\n    }\r\n    set(outputOrName: types.FunctionOutput | string, value: unknown): void {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        this.#outputs[name] = value;\r\n    }\r\n}\r\n\r\nfunction fallbackLogHandler(level: types.LogLevel, ...args: unknown[]): void {\r\n    switch (level) {\r\n        case 'trace':\r\n            console.trace(...args);\r\n            break;\r\n        case 'debug':\r\n            console.debug(...args);\r\n            break;\r\n        case 'information':\r\n            console.info(...args);\r\n            break;\r\n        case 'warning':\r\n            console.warn(...args);\r\n            break;\r\n        case 'critical':\r\n        case 'error':\r\n            console.error(...args);\r\n            break;\r\n        default:\r\n            console.log(...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport {\r\n    CoreInvocationContext,\r\n    InvocationArguments,\r\n    RpcBindingInfo,\r\n    RpcInvocationResponse,\r\n    RpcLogCategory,\r\n    RpcLogLevel,\r\n    RpcTypedData,\r\n} from '@azure/functions-core';\r\nimport { format } from 'util';\r\nimport { returnBindingKey } from './constants';\r\nimport { fromRpcBindings } from './converters/fromRpcBindings';\r\nimport { fromRpcRetryContext, fromRpcTraceContext } from './converters/fromRpcContext';\r\nimport { fromRpcTriggerMetadata } from './converters/fromRpcTriggerMetadata';\r\nimport { fromRpcTypedData } from './converters/fromRpcTypedData';\r\nimport { toCamelCaseValue } from './converters/toCamelCase';\r\nimport { toRpcHttp } from './converters/toRpcHttp';\r\nimport { toRpcTypedData } from './converters/toRpcTypedData';\r\nimport { InvocationContext } from './InvocationContext';\r\nimport { isHttpTrigger, isTimerTrigger, isTrigger } from './utils/isTrigger';\r\nimport { isDefined, nonNullProp, nonNullValue } from './utils/nonNull';\r\n\r\nexport class InvocationModel implements coreTypes.InvocationModel {\r\n    #isDone = false;\r\n    #coreCtx: CoreInvocationContext;\r\n    #functionName: string;\r\n    #bindings: Record<string, RpcBindingInfo>;\r\n    #triggerType: string;\r\n\r\n    constructor(coreCtx: CoreInvocationContext) {\r\n        this.#coreCtx = coreCtx;\r\n        this.#functionName = nonNullProp(coreCtx.metadata, 'name');\r\n        this.#bindings = nonNullProp(coreCtx.metadata, 'bindings');\r\n        const triggerBinding = nonNullValue(\r\n            Object.values(this.#bindings).find((b) => isTrigger(b.type)),\r\n            'triggerBinding'\r\n        );\r\n        this.#triggerType = nonNullProp(triggerBinding, 'type');\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    async getArguments(): Promise<InvocationArguments> {\r\n        const req = this.#coreCtx.request;\r\n\r\n        const context = new InvocationContext({\r\n            invocationId: nonNullProp(this.#coreCtx, 'invocationId'),\r\n            functionName: this.#functionName,\r\n            logHandler: (level: RpcLogLevel, ...args: unknown[]) => this.#userLog(level, ...args),\r\n            retryContext: fromRpcRetryContext(req.retryContext),\r\n            traceContext: fromRpcTraceContext(req.traceContext),\r\n            triggerMetadata: fromRpcTriggerMetadata(req.triggerMetadata, this.#triggerType),\r\n            options: fromRpcBindings(this.#bindings),\r\n        });\r\n\r\n        const inputs: unknown[] = [];\r\n        if (req.inputData) {\r\n            for (const binding of req.inputData) {\r\n                const bindingName = nonNullProp(binding, 'name');\r\n                let input: unknown = fromRpcTypedData(binding.data);\r\n\r\n                const bindingType = this.#bindings[bindingName].type;\r\n                if (isTimerTrigger(bindingType)) {\r\n                    input = toCamelCaseValue(input);\r\n                }\r\n\r\n                if (isTrigger(bindingType)) {\r\n                    inputs.push(input);\r\n                } else {\r\n                    context.extraInputs.set(bindingName, input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { context, inputs };\r\n    }\r\n\r\n    async invokeFunction(\r\n        context: InvocationContext,\r\n        inputs: unknown[],\r\n        handler: coreTypes.FunctionCallback\r\n    ): Promise<unknown> {\r\n        try {\r\n            return await Promise.resolve(handler(...inputs, context));\r\n        } finally {\r\n            this.#isDone = true;\r\n        }\r\n    }\r\n\r\n    async getResponse(context: InvocationContext, result: unknown): Promise<RpcInvocationResponse> {\r\n        const response: RpcInvocationResponse = { invocationId: this.#coreCtx.invocationId };\r\n\r\n        response.outputData = [];\r\n        let usedReturnValue = false;\r\n        for (const [name, binding] of Object.entries(this.#bindings)) {\r\n            if (binding.direction === 'out') {\r\n                if (name === returnBindingKey) {\r\n                    response.returnValue = await this.#convertOutput(binding, result);\r\n                    usedReturnValue = true;\r\n                } else {\r\n                    const outputValue = await this.#convertOutput(binding, context.extraOutputs.get(name));\r\n                    if (isDefined(outputValue)) {\r\n                        response.outputData.push({ name, data: outputValue });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // This allows the return value of non-HTTP triggered functions to be passed back\r\n        // to the host, even if no explicit output binding is set. In most cases, this is ignored,\r\n        // but e.g., Durable uses this to pass orchestrator state back to the Durable extension, w/o\r\n        // an explicit output binding. See here for more details: https://github.com/Azure/azure-functions-nodejs-library/pull/25\r\n        if (!usedReturnValue && !isHttpTrigger(this.#triggerType)) {\r\n            response.returnValue = toRpcTypedData(result);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    async #convertOutput(binding: RpcBindingInfo, value: unknown): Promise<RpcTypedData | null | undefined> {\r\n        if (binding.type?.toLowerCase() === 'http') {\r\n            return toRpcHttp(value);\r\n        } else {\r\n            return toRpcTypedData(value);\r\n        }\r\n    }\r\n\r\n    #log(level: RpcLogLevel, logCategory: RpcLogCategory, ...args: unknown[]): void {\r\n        this.#coreCtx.log(level, logCategory, format(...args));\r\n    }\r\n\r\n    #systemLog(level: RpcLogLevel, ...args: unknown[]) {\r\n        this.#log(level, 'system', ...args);\r\n    }\r\n\r\n    #userLog(level: RpcLogLevel, ...args: unknown[]): void {\r\n        if (this.#isDone && this.#coreCtx.state !== 'postInvocationHooks') {\r\n            let badAsyncMsg =\r\n                \"Warning: Unexpected call to 'log' on the context object after function execution has completed. Please check for asynchronous calls that are not awaited. \";\r\n            badAsyncMsg += `Function name: ${this.#functionName}. Invocation Id: ${this.#coreCtx.invocationId}.`;\r\n            this.#systemLog('warning', badAsyncMsg);\r\n        }\r\n        this.#log(level, 'user', ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport { HttpRequest } from './http/HttpRequest';\r\nexport { HttpResponse } from './http/HttpResponse';\r\nexport { InvocationContext } from './InvocationContext';\r\n\r\nconst bindingCounts: Record<string, number> = {};\r\n/**\r\n * If the host spawns multiple workers, it expects the metadata (including binding name) to be the same across workers.\r\n * That means we need to generate binding names in a deterministic fashion, so we'll do that using a count\r\n * There's a tiny risk users register bindings in a non-deterministic order (i.e. async race conditions), but it's okay considering the following:\r\n * 1. We will track the count individually for each binding type. This makes the names more readable and reduces the chances a race condition will matter\r\n * 2. Users can manually specify the name themselves (aka if they're doing weird async stuff) and we will respect that\r\n * More info here: https://github.com/Azure/azure-functions-nodejs-worker/issues/638\r\n */\r\nexport function addBindingName<T extends { type: string; name?: string }>(\r\n    binding: T,\r\n    suffix: string\r\n): T & { name: string } {\r\n    if (!binding.name) {\r\n        let bindingType = binding.type;\r\n        if (!bindingType.toLowerCase().endsWith(suffix.toLowerCase())) {\r\n            bindingType += suffix;\r\n        }\r\n        let count = bindingCounts[bindingType] || 0;\r\n        count += 1;\r\n        bindingCounts[bindingType] = count;\r\n        binding.name = bindingType + count.toString();\r\n    }\r\n    return <T & { name: string }>binding;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBFunctionOptions,\r\n    EventGridFunctionOptions,\r\n    EventHubFunctionOptions,\r\n    ExponentialBackoffRetryOptions,\r\n    FixedDelayRetryOptions,\r\n    FunctionOptions,\r\n    FunctionTrigger,\r\n    GenericFunctionOptions,\r\n    HttpFunctionOptions,\r\n    HttpHandler,\r\n    HttpMethod,\r\n    HttpMethodFunctionOptions,\r\n    ServiceBusQueueFunctionOptions,\r\n    ServiceBusTopicFunctionOptions,\r\n    StorageBlobFunctionOptions,\r\n    StorageQueueFunctionOptions,\r\n    TimerFunctionOptions,\r\n    WarmupFunctionOptions,\r\n} from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { CoreInvocationContext, FunctionCallback } from '@azure/functions-core';\r\nimport { returnBindingKey, version } from './constants';\r\nimport { toRpcDuration } from './converters/toRpcDuration';\r\nimport { InvocationModel } from './InvocationModel';\r\nimport * as output from './output';\r\nimport * as trigger from './trigger';\r\nimport { isTrigger } from './utils/isTrigger';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\n\r\nexport * as hook from './hooks/registerHook';\r\n\r\nclass ProgrammingModel implements coreTypes.ProgrammingModel {\r\n    name = '@azure/functions';\r\n    version = version;\r\n    getInvocationModel(coreCtx: CoreInvocationContext): InvocationModel {\r\n        return new InvocationModel(coreCtx);\r\n    }\r\n}\r\n\r\nlet hasSetup = false;\r\nfunction setup() {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            'WARNING: Failed to detect the Azure Functions runtime. Switching \"@azure/functions\" package to test mode - not all features are supported.'\r\n        );\r\n    } else {\r\n        coreApi.setProgrammingModel(new ProgrammingModel());\r\n    }\r\n    hasSetup = true;\r\n}\r\n\r\nfunction convertToHttpOptions(\r\n    optionsOrHandler: HttpFunctionOptions | HttpHandler,\r\n    method: HttpMethod\r\n): HttpFunctionOptions {\r\n    const options: HttpFunctionOptions =\r\n        typeof optionsOrHandler === 'function' ? { handler: optionsOrHandler } : optionsOrHandler;\r\n    options.methods = [method];\r\n    return options;\r\n}\r\n\r\nfunction convertToGenericOptions<T extends Omit<FunctionOptions, 'trigger'> & Partial<FunctionOptions>>(\r\n    options: T,\r\n    triggerMethod: (o: Omit<T, 'handler' | 'return' | 'trigger' | 'extraInputs' | 'extraOutputs'>) => FunctionTrigger\r\n): FunctionOptions {\r\n    const { handler, return: ret, trigger, extraInputs, extraOutputs, ...triggerOptions } = options;\r\n    return {\r\n        trigger: trigger ?? triggerMethod(triggerOptions),\r\n        return: ret,\r\n        extraInputs,\r\n        extraOutputs,\r\n        handler,\r\n    };\r\n}\r\n\r\nexport function get(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'GET'));\r\n}\r\n\r\nexport function put(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PUT'));\r\n}\r\n\r\nexport function post(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'POST'));\r\n}\r\n\r\nexport function patch(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PATCH'));\r\n}\r\n\r\nexport function deleteRequest(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'DELETE'));\r\n}\r\n\r\nexport function http(name: string, options: HttpFunctionOptions): void {\r\n    options.return ||= output.http({});\r\n    generic(name, convertToGenericOptions(options, trigger.http));\r\n}\r\n\r\nexport function timer(name: string, options: TimerFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.timer));\r\n}\r\n\r\nexport function storageBlob(name: string, options: StorageBlobFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageBlob));\r\n}\r\n\r\nexport function storageQueue(name: string, options: StorageQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageQueue));\r\n}\r\n\r\nexport function serviceBusQueue(name: string, options: ServiceBusQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusQueue));\r\n}\r\n\r\nexport function serviceBusTopic(name: string, options: ServiceBusTopicFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusTopic));\r\n}\r\n\r\nexport function eventHub(name: string, options: EventHubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventHub));\r\n}\r\n\r\nexport function eventGrid(name: string, options: EventGridFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventGrid));\r\n}\r\n\r\nexport function cosmosDB(name: string, options: CosmosDBFunctionOptions): void {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    generic(name, convertToGenericOptions(options, <any>trigger.cosmosDB));\r\n}\r\n\r\nexport function warmup(name: string, options: WarmupFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.warmup));\r\n}\r\n\r\nexport function generic(name: string, options: GenericFunctionOptions): void {\r\n    if (!hasSetup) {\r\n        setup();\r\n    }\r\n\r\n    const bindings: Record<string, coreTypes.RpcBindingInfo> = {};\r\n\r\n    const trigger = options.trigger;\r\n    bindings[trigger.name] = {\r\n        ...trigger,\r\n        direction: 'in',\r\n        type: isTrigger(trigger.type) ? trigger.type : trigger.type + 'Trigger',\r\n    };\r\n\r\n    if (options.extraInputs) {\r\n        for (const input of options.extraInputs) {\r\n            bindings[input.name] = {\r\n                ...input,\r\n                direction: 'in',\r\n            };\r\n        }\r\n    }\r\n\r\n    if (options.return) {\r\n        bindings[returnBindingKey] = {\r\n            ...options.return,\r\n            direction: 'out',\r\n        };\r\n    }\r\n\r\n    if (options.extraOutputs) {\r\n        for (const output of options.extraOutputs) {\r\n            bindings[output.name] = {\r\n                ...output,\r\n                direction: 'out',\r\n            };\r\n        }\r\n    }\r\n\r\n    let retryOptions: coreTypes.RpcRetryOptions | undefined;\r\n    if (options.retry) {\r\n        retryOptions = {\r\n            ...options.retry,\r\n            retryStrategy: options.retry.strategy,\r\n            delayInterval: toRpcDuration((<FixedDelayRetryOptions>options.retry).delayInterval, 'retry.delayInterval'),\r\n            maximumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).maximumInterval,\r\n                'retry.maximumInterval'\r\n            ),\r\n            minimumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).minimumInterval,\r\n                'retry.minimumInterval'\r\n            ),\r\n        };\r\n    }\r\n\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register function \"${name}\" because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n    } else {\r\n        coreApi.registerFunction({ name, bindings, retryOptions }, <FunctionCallback>options.handler);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const version = '4.1.0';\r\n\r\nexport const returnBindingKey = '$return';\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EffectiveFunctionOptions, FunctionInput, FunctionOutput, FunctionTrigger } from '@azure/functions';\r\nimport { RpcBindingInfo } from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { nonNullProp, nonNullValue } from '../utils/nonNull';\r\n\r\nexport function fromRpcBindings(bindings: Record<string, RpcBindingInfo> | null | undefined): EffectiveFunctionOptions {\r\n    let trigger: FunctionTrigger | undefined;\r\n    let returnBinding: FunctionOutput | undefined;\r\n    const extraInputs: FunctionInput[] = [];\r\n    const extraOutputs: FunctionOutput[] = [];\r\n    for (const [name, binding] of Object.entries(nonNullValue(bindings, 'bindings'))) {\r\n        if (isTrigger(binding.type)) {\r\n            trigger = fromRpcBinding(name, binding);\r\n        } else if (name === returnBindingKey) {\r\n            returnBinding = fromRpcBinding(name, binding);\r\n        } else if (binding.direction === 'in') {\r\n            extraInputs.push(fromRpcBinding(name, binding));\r\n        } else if (binding.direction === 'out') {\r\n            extraOutputs.push(fromRpcBinding(name, binding));\r\n        }\r\n    }\r\n    return {\r\n        trigger: nonNullValue(trigger, 'trigger'),\r\n        return: returnBinding,\r\n        extraInputs,\r\n        extraOutputs,\r\n    };\r\n}\r\n\r\nfunction fromRpcBinding(name: string, binding: RpcBindingInfo): FunctionTrigger | FunctionInput | FunctionOutput {\r\n    return {\r\n        ...binding,\r\n        type: nonNullProp(binding, 'type'),\r\n        name,\r\n    };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Exception, RetryContext, TraceContext } from '@azure/functions';\r\nimport { RpcException, RpcRetryContext, RpcTraceContext } from '@azure/functions-core';\r\nimport { copyPropIfDefined, nonNullProp } from '../utils/nonNull';\r\n\r\nexport function fromRpcRetryContext(retryContext: RpcRetryContext | null | undefined): RetryContext | undefined {\r\n    if (!retryContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: RetryContext = {\r\n            retryCount: nonNullProp(retryContext, 'retryCount'),\r\n            maxRetryCount: nonNullProp(retryContext, 'maxRetryCount'),\r\n        };\r\n        if (retryContext.exception) {\r\n            result.exception = fromRpcException(retryContext.exception);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction fromRpcException(exception: RpcException): Exception {\r\n    const result: Exception = {};\r\n    copyPropIfDefined(exception, result, 'message');\r\n    copyPropIfDefined(exception, result, 'source');\r\n    copyPropIfDefined(exception, result, 'stackTrace');\r\n    return result;\r\n}\r\n\r\nexport function fromRpcTraceContext(traceContext: RpcTraceContext | null | undefined): TraceContext | undefined {\r\n    if (!traceContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: TraceContext = {};\r\n        copyPropIfDefined(traceContext, result, 'traceParent');\r\n        copyPropIfDefined(traceContext, result, 'traceState');\r\n        if (traceContext.attributes) {\r\n            result.attributes = traceContext.attributes;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableString } from '@azure/functions-core';\r\n\r\nexport function fromNullableMapping(\r\n    nullableMapping: Record<string, RpcNullableString> | null | undefined,\r\n    originalMapping?: Record<string, string> | null\r\n): Record<string, string> {\r\n    let converted = {};\r\n    if (nullableMapping && Object.keys(nullableMapping).length > 0) {\r\n        for (const key in nullableMapping) {\r\n            converted[key] = nullableMapping[key].value || '';\r\n        }\r\n    } else if (originalMapping && Object.keys(originalMapping).length > 0) {\r\n        converted = originalMapping;\r\n    }\r\n    return converted;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { TriggerMetadata } from '@azure/functions';\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { isHttpTrigger, isTimerTrigger } from '../utils/isTrigger';\r\nimport { fromRpcTypedData } from './fromRpcTypedData';\r\nimport { toCamelCaseKey, toCamelCaseValue } from './toCamelCase';\r\n\r\nexport function fromRpcTriggerMetadata(\r\n    triggerMetadata: Record<string, RpcTypedData> | null | undefined,\r\n    triggerType: string\r\n): TriggerMetadata | undefined {\r\n    // For http and timer triggers, we will avoid using `triggerMetadata` for a few reasons:\r\n    // 1. It uses `toCamelCase` methods, which can lead to weird casing bugs\r\n    // 2. It's generally a large medley of properties that is difficult for us to document/type\r\n    // 3. We can represent that information on the request & timer objects instead\r\n    if (!triggerMetadata || isHttpTrigger(triggerType) || isTimerTrigger(triggerType)) {\r\n        return undefined;\r\n    } else {\r\n        const result: TriggerMetadata = {};\r\n        for (const [key, value] of Object.entries(triggerMetadata)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(fromRpcTypedData(value));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { HttpRequest } from '../http/HttpRequest';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function fromRpcTypedData(data: RpcTypedData | null | undefined): unknown {\r\n    if (!data) {\r\n        return undefined;\r\n    } else if (isDefined(data.string)) {\r\n        return tryJsonParse(data.string);\r\n    } else if (isDefined(data.json)) {\r\n        return JSON.parse(data.json);\r\n    } else if (isDefined(data.bytes)) {\r\n        return Buffer.from(data.bytes);\r\n    } else if (isDefined(data.stream)) {\r\n        return Buffer.from(data.stream);\r\n    } else if (isDefined(data.http)) {\r\n        return new HttpRequest(data.http);\r\n    } else if (isDefined(data.int)) {\r\n        return data.int;\r\n    } else if (isDefined(data.double)) {\r\n        return data.double;\r\n    } else if (data.collectionBytes && isDefined(data.collectionBytes.bytes)) {\r\n        return data.collectionBytes.bytes.map((d) => Buffer.from(d));\r\n    } else if (data.collectionString && isDefined(data.collectionString.string)) {\r\n        return data.collectionString.string.map(tryJsonParse);\r\n    } else if (data.collectionDouble && isDefined(data.collectionDouble.double)) {\r\n        return data.collectionDouble.double;\r\n    } else if (data.collectionSint64 && isDefined(data.collectionSint64.sint64)) {\r\n        return data.collectionSint64.sint64;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction tryJsonParse(data: string): unknown {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch {\r\n        return data;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function toCamelCaseValue(data: unknown): unknown {\r\n    if (typeof data !== 'object' || data === null) {\r\n        return data;\r\n    } else if (Array.isArray(data)) {\r\n        return data.map(toCamelCaseValue);\r\n    } else {\r\n        const result = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(value);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function toCamelCaseKey(key: string): string {\r\n    return key.charAt(0).toLowerCase() + key.slice(1);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcDuration } from '@azure/functions-core';\r\nimport { Duration } from '../../types';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function toRpcDuration(dateTime: Duration | number | undefined, propertyName: string): RpcDuration | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            let timeInMilliseconds: number | undefined;\r\n            if (typeof dateTime === 'object') {\r\n                const minutes = (dateTime.minutes || 0) + (dateTime.hours || 0) * 60;\r\n                const seconds = (dateTime.seconds || 0) + minutes * 60;\r\n                timeInMilliseconds = (dateTime.milliseconds || 0) + seconds * 1000;\r\n            } else if (typeof dateTime === 'number') {\r\n                timeInMilliseconds = dateTime;\r\n            }\r\n\r\n            if (isDefined(timeInMilliseconds) && timeInMilliseconds >= 0) {\r\n                return {\r\n                    seconds: Math.round(timeInMilliseconds / 1000),\r\n                };\r\n            }\r\n        } catch {\r\n            // fall through\r\n        }\r\n\r\n        throw new AzFuncSystemError(\r\n            `A 'number' or 'Duration' object was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { HttpResponse } from '../http/HttpResponse';\r\nimport { toRpcHttpCookie } from './toRpcHttpCookie';\r\nimport { toRpcTypedData } from './toRpcTypedData';\r\n\r\nexport async function toRpcHttp(data: unknown): Promise<RpcTypedData | null | undefined> {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data !== 'object') {\r\n        throw new AzFuncSystemError(\r\n            'The HTTP response must be an object with optional properties \"body\", \"status\", \"headers\", and \"cookies\".'\r\n        );\r\n    }\r\n\r\n    const response = data instanceof HttpResponse ? data : new HttpResponse(data);\r\n    const rpcResponse: RpcHttpData = {};\r\n    rpcResponse.statusCode = response.status.toString();\r\n\r\n    rpcResponse.headers = {};\r\n    for (const [key, value] of response.headers.entries()) {\r\n        rpcResponse.headers[key] = value;\r\n    }\r\n\r\n    rpcResponse.cookies = [];\r\n    for (const cookie of response.cookies) {\r\n        rpcResponse.cookies.push(toRpcHttpCookie(cookie));\r\n    }\r\n\r\n    rpcResponse.enableContentNegotiation = response.enableContentNegotiation;\r\n\r\n    const bodyBytes = await response.arrayBuffer();\r\n    rpcResponse.body = toRpcTypedData(bodyBytes);\r\n\r\n    return { http: rpcResponse };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Cookie } from '@azure/functions';\r\nimport { RpcHttpCookie, RpcHttpCookieSameSite } from '@azure/functions-core';\r\nimport { toNullableBool, toNullableDouble, toNullableString, toNullableTimestamp, toRpcString } from './toRpcNullable';\r\n\r\n/**\r\n * From RFC specifications for 'Set-Cookie' response header: https://www.rfc-editor.org/rfc/rfc6265.txt\r\n * @param inputCookie\r\n */\r\nexport function toRpcHttpCookie(inputCookie: Cookie): RpcHttpCookie {\r\n    // Resolve RpcHttpCookie.SameSite enum, a one-off\r\n    let rpcSameSite: RpcHttpCookieSameSite = 'none';\r\n    if (inputCookie && inputCookie.sameSite) {\r\n        const sameSite = inputCookie.sameSite.toLocaleLowerCase();\r\n        if (sameSite === 'lax') {\r\n            rpcSameSite = 'lax';\r\n        } else if (sameSite === 'strict') {\r\n            rpcSameSite = 'strict';\r\n        } else if (sameSite === 'none') {\r\n            rpcSameSite = 'explicitNone';\r\n        }\r\n    }\r\n\r\n    const rpcCookie: RpcHttpCookie = {\r\n        name: inputCookie && toRpcString(inputCookie.name, 'cookie.name'),\r\n        value: inputCookie && toRpcString(inputCookie.value, 'cookie.value'),\r\n        domain: toNullableString(inputCookie && inputCookie.domain, 'cookie.domain'),\r\n        path: toNullableString(inputCookie && inputCookie.path, 'cookie.path'),\r\n        expires: toNullableTimestamp(inputCookie && inputCookie.expires, 'cookie.expires'),\r\n        secure: toNullableBool(inputCookie && inputCookie.secure, 'cookie.secure'),\r\n        httpOnly: toNullableBool(inputCookie && inputCookie.httpOnly, 'cookie.httpOnly'),\r\n        sameSite: rpcSameSite,\r\n        maxAge: toNullableDouble(inputCookie && inputCookie.maxAge, 'cookie.maxAge'),\r\n    };\r\n\r\n    return rpcCookie;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableBool, RpcNullableDouble, RpcNullableString, RpcNullableTimestamp } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\n/**\r\n * Converts boolean input to an 'INullableBool' to be sent through the RPC layer.\r\n * Input that is not a boolean but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableBool if it is a valid boolean\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableBool(nullable: boolean | undefined, propertyName: string): undefined | RpcNullableBool {\r\n    if (typeof nullable === 'boolean') {\r\n        return <RpcNullableBool>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'boolean' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts number or string that parses to a number to an 'INullableDouble' to be sent through the RPC layer.\r\n * Input that is not a valid number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableDouble if it is a valid number\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableDouble(\r\n    nullable: number | string | undefined,\r\n    propertyName: string\r\n): undefined | RpcNullableDouble {\r\n    if (typeof nullable === 'number') {\r\n        return <RpcNullableDouble>{\r\n            value: nullable,\r\n        };\r\n    } else if (typeof nullable === 'string') {\r\n        if (!isNaN(Number(nullable))) {\r\n            const parsedNumber = parseFloat(nullable);\r\n            return <RpcNullableDouble>{\r\n                value: parsedNumber,\r\n            };\r\n        }\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'number' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toRpcString(nullable: string | undefined, propertyName: string): string {\r\n    if (typeof nullable === 'string') {\r\n        return nullable;\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableString(nullable: string | undefined, propertyName: string): undefined | RpcNullableString {\r\n    if (typeof nullable === 'string') {\r\n        return <RpcNullableString>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts Date or number input to an 'INullableTimestamp' to be sent through the RPC layer.\r\n * Input that is not a Date or number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableTimestamp if it is valid input\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableTimestamp(\r\n    dateTime: Date | number | undefined,\r\n    propertyName: string\r\n): RpcNullableTimestamp | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            const timeInMilliseconds = typeof dateTime === 'number' ? dateTime : dateTime.getTime();\r\n\r\n            if (timeInMilliseconds && timeInMilliseconds >= 0) {\r\n                return {\r\n                    value: {\r\n                        seconds: Math.round(timeInMilliseconds / 1000),\r\n                    },\r\n                };\r\n            }\r\n        } catch {\r\n            throw new AzFuncSystemError(\r\n                `A 'number' or 'Date' input was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n            );\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\n\r\nexport function toRpcTypedData(data: unknown): RpcTypedData | null | undefined {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data === 'string') {\r\n        return { string: data };\r\n    } else if (Buffer.isBuffer(data)) {\r\n        return { bytes: data };\r\n    } else if (ArrayBuffer.isView(data)) {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        return { bytes: bytes };\r\n    } else if (data instanceof ArrayBuffer) {\r\n        const bytes = new Uint8Array(data);\r\n        return { bytes: bytes };\r\n    } else if (typeof data === 'number') {\r\n        if (Number.isInteger(data)) {\r\n            return { int: data };\r\n        } else {\r\n            return { double: data };\r\n        }\r\n    } else {\r\n        return { json: JSON.stringify(data) };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport interface AzFuncError {\r\n    /**\r\n     * System errors can be tracked in our telemetry\r\n     * User errors cannot be tracked in our telemetry because they could have user information (users can still track it themselves in their app insights resource)\r\n     */\r\n    isAzureFunctionsSystemError: boolean;\r\n}\r\n\r\nexport class AzFuncSystemError extends Error {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncTypeError extends TypeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncRangeError extends RangeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class ReadOnlyError extends AzFuncTypeError {\r\n    constructor(propertyName: string) {\r\n        super(`Cannot assign to read only property '${propertyName}'`);\r\n    }\r\n}\r\n\r\nexport function ensureErrorType(err: unknown): Error & Partial<AzFuncError> {\r\n    if (err instanceof Error) {\r\n        return err;\r\n    } else {\r\n        let message: string;\r\n        if (err === undefined || err === null) {\r\n            message = 'Unknown error';\r\n        } else if (typeof err === 'string') {\r\n            message = err;\r\n        } else if (typeof err === 'object') {\r\n            message = JSON.stringify(err);\r\n        } else {\r\n            message = String(err);\r\n        }\r\n        return new Error(message);\r\n    }\r\n}\r\n\r\n/**\r\n * This is mostly for callbacks where `null` or `undefined` indicates there is no error\r\n * By contrast, anything thrown/caught is assumed to be an error regardless of what it is\r\n */\r\nexport function isError(err: unknown): boolean {\r\n    return err !== null && err !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppStartContext extends HookContext implements types.AppStartContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppTerminateContext extends HookContext implements types.AppTerminateContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\n\r\nexport class HookContext implements types.HookContext {\r\n    #init: types.HookContextInit;\r\n\r\n    constructor(init?: types.HookContextInit) {\r\n        this.#init = init ?? {};\r\n        this.#init.hookData ??= {};\r\n    }\r\n\r\n    get hookData(): Record<string, unknown> {\r\n        return nonNullProp(this.#init, 'hookData');\r\n    }\r\n\r\n    set hookData(_value: unknown) {\r\n        throw new ReadOnlyError('hookData');\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { InvocationContext } from '../InvocationContext';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class InvocationHookContext extends HookContext implements types.InvocationHookContext {\r\n    #init: types.InvocationHookContextInit;\r\n\r\n    constructor(init?: types.InvocationHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.inputs ??= [];\r\n        this.#init.invocationContext ??= new InvocationContext();\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext {\r\n        return nonNullProp(this.#init, 'invocationContext');\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n\r\n    get inputs(): unknown[] {\r\n        return nonNullProp(this.#init, 'inputs');\r\n    }\r\n\r\n    set inputs(value: unknown[]) {\r\n        this.#init.inputs = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PostInvocationContext extends InvocationHookContext implements types.PostInvocationContext {\r\n    #init: types.PostInvocationContextInit;\r\n\r\n    constructor(init?: types.PostInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n    }\r\n\r\n    get result(): unknown {\r\n        return this.#init.result;\r\n    }\r\n\r\n    set result(value: unknown) {\r\n        this.#init.result = value;\r\n    }\r\n\r\n    get error(): unknown {\r\n        return this.#init.error;\r\n    }\r\n\r\n    set error(value: unknown) {\r\n        this.#init.error = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PreInvocationContext extends InvocationHookContext implements types.PreInvocationContext {\r\n    #init: types.PreInvocationContextInit;\r\n\r\n    constructor(init?: types.PreInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.functionCallback ??= () => {};\r\n    }\r\n\r\n    get functionHandler(): types.FunctionHandler {\r\n        return nonNullProp(this.#init, 'functionCallback');\r\n    }\r\n\r\n    set functionHandler(value: types.FunctionHandler) {\r\n        this.#init.functionCallback = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AppStartHandler, AppTerminateHandler, PostInvocationHandler, PreInvocationHandler } from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { Disposable } from '../utils/Disposable';\r\nimport { tryGetCoreApiLazy } from '../utils/tryGetCoreApiLazy';\r\nimport { AppStartContext } from './AppStartContext';\r\nimport { AppTerminateContext } from './AppTerminateContext';\r\nimport { PostInvocationContext } from './PostInvocationContext';\r\nimport { PreInvocationContext } from './PreInvocationContext';\r\n\r\nfunction registerHook(hookName: string, callback: coreTypes.HookCallback): coreTypes.Disposable {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n        return new Disposable(() => {\r\n            console.warn(\r\n                `WARNING: Skipping call to dispose ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n            );\r\n        });\r\n    } else {\r\n        return coreApi.registerHook(hookName, callback);\r\n    }\r\n}\r\n\r\nexport function appStart(handler: AppStartHandler): Disposable {\r\n    return registerHook('appStart', (coreContext) => {\r\n        return handler(new AppStartContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function appTerminate(handler: AppTerminateHandler): Disposable {\r\n    return registerHook('appTerminate', (coreContext) => {\r\n        return handler(new AppTerminateContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function preInvocation(handler: PreInvocationHandler): Disposable {\r\n    return registerHook('preInvocation', (coreContext) => {\r\n        return handler(new PreInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function postInvocation(handler: PostInvocationHandler): Disposable {\r\n    return registerHook('postInvocation', (coreContext) => {\r\n        return handler(new PostInvocationContext(coreContext));\r\n    });\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpRequestParams, HttpRequestUser } from '@azure/functions';\r\nimport { RpcHttpData } from '@azure/functions-core';\r\nimport { Blob } from 'buffer';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, Request as uRequest } from 'undici';\r\nimport { URLSearchParams } from 'url';\r\nimport { fromNullableMapping } from '../converters/fromRpcNullable';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { extractHttpUserFromHeaders } from './extractHttpUserFromHeaders';\r\n\r\nexport class HttpRequest implements types.HttpRequest {\r\n    readonly query: URLSearchParams;\r\n    readonly params: HttpRequestParams;\r\n\r\n    #cachedUser?: HttpRequestUser | null;\r\n    #uReq: uRequest;\r\n    #body?: Buffer | string;\r\n\r\n    constructor(rpcHttp: RpcHttpData) {\r\n        const url = nonNullProp(rpcHttp, 'url');\r\n\r\n        if (rpcHttp.body?.bytes) {\r\n            this.#body = Buffer.from(rpcHttp.body?.bytes);\r\n        } else if (rpcHttp.body?.string) {\r\n            this.#body = rpcHttp.body.string;\r\n        }\r\n\r\n        this.#uReq = new uRequest(url, {\r\n            body: this.#body,\r\n            method: nonNullProp(rpcHttp, 'method'),\r\n            headers: fromNullableMapping(rpcHttp.nullableHeaders, rpcHttp.headers),\r\n        });\r\n\r\n        this.query = new URLSearchParams(fromNullableMapping(rpcHttp.nullableQuery, rpcHttp.query));\r\n        this.params = fromNullableMapping(rpcHttp.nullableParams, rpcHttp.params);\r\n    }\r\n\r\n    get url(): string {\r\n        return this.#uReq.url;\r\n    }\r\n\r\n    get method(): string {\r\n        return this.#uReq.method;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uReq.headers;\r\n    }\r\n\r\n    get user(): HttpRequestUser | null {\r\n        if (this.#cachedUser === undefined) {\r\n            this.#cachedUser = extractHttpUserFromHeaders(this.headers);\r\n        }\r\n\r\n        return this.#cachedUser;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uReq.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uReq.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uReq.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uReq.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uReq.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uReq.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uReq.text();\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpResponseInit } from '@azure/functions';\r\nimport { Blob } from 'buffer';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, Response as uResponse, ResponseInit as uResponseInit } from 'undici';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport class HttpResponse implements types.HttpResponse {\r\n    readonly cookies: types.Cookie[];\r\n    readonly enableContentNegotiation: boolean;\r\n\r\n    #uRes: uResponse;\r\n\r\n    constructor(resInit?: HttpResponseInit) {\r\n        const uResInit: uResponseInit = { status: resInit?.status, headers: resInit?.headers };\r\n        if (isDefined(resInit?.jsonBody)) {\r\n            this.#uRes = uResponse.json(resInit?.jsonBody, uResInit);\r\n        } else {\r\n            this.#uRes = new uResponse(resInit?.body, uResInit);\r\n        }\r\n\r\n        this.cookies = resInit?.cookies || [];\r\n        this.enableContentNegotiation = !!resInit?.enableContentNegotiation;\r\n    }\r\n\r\n    get status(): number {\r\n        return this.#uRes.status;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uRes.headers;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uRes.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uRes.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uRes.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uRes.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uRes.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uRes.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uRes.text();\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { HttpRequestUser } from '@azure/functions';\r\nimport { Headers } from 'undici';\r\nimport { nonNullValue } from '../utils/nonNull';\r\n\r\n/* grandfathered in. Should fix when possible */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access */\r\n\r\nexport function extractHttpUserFromHeaders(headers: Headers): HttpRequestUser | null {\r\n    let user: HttpRequestUser | null = null;\r\n\r\n    const clientPrincipal = headers.get('x-ms-client-principal');\r\n    if (clientPrincipal) {\r\n        const claimsPrincipalData = JSON.parse(Buffer.from(clientPrincipal, 'base64').toString('utf-8'));\r\n\r\n        if (claimsPrincipalData['identityProvider']) {\r\n            user = {\r\n                type: 'StaticWebApps',\r\n                id: claimsPrincipalData['userId'],\r\n                username: claimsPrincipalData['userDetails'],\r\n                identityProvider: claimsPrincipalData['identityProvider'],\r\n                claimsPrincipalData,\r\n            };\r\n        } else {\r\n            user = {\r\n                type: 'AppService',\r\n                id: nonNullValue(headers.get('x-ms-client-principal-id'), 'user-id'),\r\n                username: nonNullValue(headers.get('x-ms-client-principal-name'), 'user-name'),\r\n                identityProvider: nonNullValue(headers.get('x-ms-client-principal-idp'), 'user-idp'),\r\n                claimsPrincipalData,\r\n            };\r\n        }\r\n    }\r\n\r\n    return user;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBInput,\r\n    CosmosDBInputOptions,\r\n    FunctionInput,\r\n    GenericInputOptions,\r\n    SqlInput,\r\n    SqlInputOptions,\r\n    StorageBlobInput,\r\n    StorageBlobInputOptions,\r\n    TableInput,\r\n    TableInputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function storageBlob(options: StorageBlobInputOptions): StorageBlobInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableInputOptions): TableInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBInputOptions): CosmosDBInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlInputOptions): SqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericInputOptions): FunctionInput {\r\n    return addInputBindingName(options);\r\n}\r\n\r\nfunction addInputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Input');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBOutput,\r\n    CosmosDBOutputOptions,\r\n    EventGridOutput,\r\n    EventGridOutputOptions,\r\n    EventHubOutput,\r\n    EventHubOutputOptions,\r\n    FunctionOutput,\r\n    GenericOutputOptions,\r\n    HttpOutput,\r\n    HttpOutputOptions,\r\n    ServiceBusQueueOutput,\r\n    ServiceBusQueueOutputOptions,\r\n    ServiceBusTopicOutput,\r\n    ServiceBusTopicOutputOptions,\r\n    SqlOutput,\r\n    SqlOutputOptions,\r\n    StorageBlobOutput,\r\n    StorageBlobOutputOptions,\r\n    StorageQueueOutput,\r\n    StorageQueueOutputOptions,\r\n    TableOutput,\r\n    TableOutputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpOutputOptions): HttpOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'http',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobOutputOptions): StorageBlobOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableOutputOptions): TableOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueOutputOptions): StorageQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'queue',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueOutputOptions): ServiceBusQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicOutputOptions): ServiceBusTopicOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubOutputOptions): EventHubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventHub',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridOutputOptions): EventGridOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventGrid',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBOutputOptions): CosmosDBOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlOutputOptions): SqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericOutputOptions): FunctionOutput {\r\n    return addOutputBindingName(options);\r\n}\r\n\r\nfunction addOutputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Output');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBTrigger,\r\n    CosmosDBTriggerOptions,\r\n    EventGridTrigger,\r\n    EventGridTriggerOptions,\r\n    EventHubTrigger,\r\n    EventHubTriggerOptions,\r\n    FunctionTrigger,\r\n    GenericTriggerOptions,\r\n    HttpTrigger,\r\n    HttpTriggerOptions,\r\n    ServiceBusQueueTrigger,\r\n    ServiceBusQueueTriggerOptions,\r\n    ServiceBusTopicTrigger,\r\n    ServiceBusTopicTriggerOptions,\r\n    StorageBlobTrigger,\r\n    StorageBlobTriggerOptions,\r\n    StorageQueueTrigger,\r\n    StorageQueueTriggerOptions,\r\n    TimerTrigger,\r\n    TimerTriggerOptions,\r\n    WarmupTrigger,\r\n    WarmupTriggerOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpTriggerOptions): HttpTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        authLevel: options.authLevel || 'anonymous',\r\n        methods: options.methods || ['GET', 'POST'],\r\n        type: 'httpTrigger',\r\n    });\r\n}\r\n\r\nexport function timer(options: TimerTriggerOptions): TimerTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'timerTrigger',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobTriggerOptions): StorageBlobTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'blobTrigger',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueTriggerOptions): StorageQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'queueTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueTriggerOptions): ServiceBusQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicTriggerOptions): ServiceBusTopicTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubTriggerOptions): EventHubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventHubTrigger',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridTriggerOptions): EventGridTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventGridTrigger',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBTriggerOptions): CosmosDBTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'cosmosDBTrigger',\r\n    });\r\n}\r\n\r\nexport function warmup(options: WarmupTriggerOptions): WarmupTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'warmupTrigger',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericTriggerOptions): FunctionTrigger {\r\n    return addTriggerBindingName(options);\r\n}\r\n\r\nfunction addTriggerBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Trigger');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Based off of VS Code\r\n * https://github.com/microsoft/vscode/blob/7bed4ce3e9f5059b5fc638c348f064edabcce5d2/src/vs/workbench/api/common/extHostTypes.ts#L65\r\n */\r\nexport class Disposable {\r\n    static from(...inDisposables: { dispose(): any }[]): Disposable {\r\n        let disposables: ReadonlyArray<{ dispose(): any }> | undefined = inDisposables;\r\n        return new Disposable(function () {\r\n            if (disposables) {\r\n                for (const disposable of disposables) {\r\n                    if (disposable && typeof disposable.dispose === 'function') {\r\n                        disposable.dispose();\r\n                    }\r\n                }\r\n                disposables = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    #callOnDispose?: () => any;\r\n\r\n    constructor(callOnDispose: () => any) {\r\n        this.#callOnDispose = callOnDispose;\r\n    }\r\n\r\n    dispose(): any {\r\n        if (typeof this.#callOnDispose === 'function') {\r\n            this.#callOnDispose();\r\n            this.#callOnDispose = undefined;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function isTrigger(typeName: string | undefined | null): boolean {\r\n    return !!typeName && /trigger$/i.test(typeName);\r\n}\r\n\r\nexport function isHttpTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'httptrigger';\r\n}\r\n\r\nexport function isTimerTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'timertrigger';\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AzFuncSystemError } from '../errors';\r\n\r\n/**\r\n * Retrieves a property by name from an object and checks that it's not null and not undefined.  It is strongly typed\r\n * for the property and will give a compile error if the given name is not a property of the source.\r\n */\r\nexport function nonNullProp<TSource, TKey extends keyof TSource>(\r\n    source: TSource,\r\n    name: TKey\r\n): NonNullable<TSource[TKey]> {\r\n    const value: NonNullable<TSource[TKey]> = <NonNullable<TSource[TKey]>>source[name];\r\n    return nonNullValue(value, <string>name);\r\n}\r\n\r\n/**\r\n * Validates that a given value is not null and not undefined.\r\n */\r\nexport function nonNullValue<T>(value: T | undefined | null, propertyNameOrMessage?: string): T {\r\n    if (value === null || value === undefined) {\r\n        throw new AzFuncSystemError(\r\n            'Internal error: Expected value to be neither null nor undefined' +\r\n                (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : '')\r\n        );\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function copyPropIfDefined<TData, TKey extends keyof TData>(source: TData, destination: TData, key: TKey): void {\r\n    if (source[key] !== null && source[key] !== undefined) {\r\n        destination[key] = source[key];\r\n    }\r\n}\r\n\r\nexport function isDefined<T>(data: T | undefined | null): data is T {\r\n    return data !== null && data !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\n\r\nlet coreApi: typeof coreTypes | undefined | null;\r\nexport function tryGetCoreApiLazy(): typeof coreTypes | null {\r\n    if (coreApi === undefined) {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            coreApi = <typeof coreTypes>require('@azure/functions-core');\r\n        } catch {\r\n            coreApi = null;\r\n        }\r\n    }\r\n    return coreApi;\r\n}\r\n","module.exports = require(\"@azure/functions-core\");","module.exports = require(\"undici\");","module.exports = require(\"url\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * as app from './app';\r\nexport { AppStartContext } from './hooks/AppStartContext';\r\nexport { AppTerminateContext } from './hooks/AppTerminateContext';\r\nexport { HookContext } from './hooks/HookContext';\r\nexport { InvocationHookContext } from './hooks/InvocationHookContext';\r\nexport { PostInvocationContext } from './hooks/PostInvocationContext';\r\nexport { PreInvocationContext } from './hooks/PreInvocationContext';\r\nexport { HttpRequest } from './http/HttpRequest';\r\nexport { HttpResponse } from './http/HttpResponse';\r\nexport * as input from './input';\r\nexport { InvocationContext } from './InvocationContext';\r\nexport * as output from './output';\r\nexport * as trigger from './trigger';\r\nexport { Disposable } from './utils/Disposable';\r\n"],"names":["constructor","init","fallbackString","this","invocationId","functionName","extraInputs","InvocationContextExtraInputs","extraOutputs","InvocationContextExtraOutputs","retryContext","traceContext","triggerMetadata","options","trigger","name","type","return","logHandler","fallbackLogHandler","log","args","trace","debug","info","warn","error","get","inputOrName","set","value","outputOrName","level","console","coreCtx","nonNullProp","metadata","triggerBinding","nonNullValue","Object","values","find","b","isTrigger","getArguments","req","request","context","InvocationContext","fromRpcRetryContext","fromRpcTraceContext","fromRpcTriggerMetadata","fromRpcBindings","inputs","inputData","binding","bindingName","input","fromRpcTypedData","data","bindingType","isTimerTrigger","toCamelCaseValue","push","invokeFunction","handler","Promise","resolve","getResponse","result","response","usedReturnValue","entries","direction","returnBindingKey","returnValue","outputValue","isDefined","outputData","isHttpTrigger","toRpcTypedData","toLowerCase","toRpcHttp","logCategory","format","state","badAsyncMsg","HttpRequest","HttpResponse","bindingCounts","suffix","endsWith","count","toString","ProgrammingModel","version","getInvocationModel","InvocationModel","hasSetup","convertToHttpOptions","optionsOrHandler","method","methods","convertToGenericOptions","triggerMethod","ret","triggerOptions","http","output","generic","coreApi","tryGetCoreApiLazy","setProgrammingModel","setup","bindings","retryOptions","retry","retryStrategy","strategy","delayInterval","toRpcDuration","maximumInterval","minimumInterval","registerFunction","timer","storageBlob","storageQueue","serviceBusQueue","serviceBusTopic","eventHub","eventGrid","cosmosDB","warmup","fromRpcBinding","returnBinding","retryCount","maxRetryCount","exception","copyPropIfDefined","fromRpcException","attributes","nullableMapping","originalMapping","converted","keys","length","key","triggerType","toCamelCaseKey","tryJsonParse","JSON","parse","string","json","bytes","Buffer","from","stream","int","double","collectionBytes","map","d","collectionString","collectionDouble","collectionSint64","sint64","charAt","slice","Array","isArray","dateTime","propertyName","timeInMilliseconds","minutes","hours","seconds","milliseconds","Math","round","AzFuncSystemError","rpcResponse","statusCode","status","headers","cookies","cookie","toRpcHttpCookie","enableContentNegotiation","bodyBytes","arrayBuffer","body","inputCookie","rpcSameSite","sameSite","toLocaleLowerCase","toRpcString","domain","toNullableString","path","expires","toNullableTimestamp","secure","toNullableBool","httpOnly","maxAge","toNullableDouble","nullable","isNaN","Number","parseFloat","getTime","isBuffer","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","isInteger","stringify","Error","isAzureFunctionsSystemError","AzFuncTypeError","TypeError","AzFuncRangeError","RangeError","super","err","message","String","AppStartContext","HookContext","AppTerminateContext","hookData","_value","ReadOnlyError","InvocationHookContext","invocationContext","PostInvocationContext","PreInvocationContext","functionCallback","functionHandler","registerHook","hookName","callback","Disposable","coreContext","rpcHttp","url","fromNullableMapping","nullableHeaders","query","URLSearchParams","nullableQuery","params","nullableParams","user","undefined","extractHttpUserFromHeaders","bodyUsed","blob","formData","text","resInit","uResInit","jsonBody","clientPrincipal","claimsPrincipalData","id","username","identityProvider","addInputBindingName","addBindingName","addOutputBindingName","addTriggerBindingName","authLevel","callOnDispose","inDisposables","disposables","disposable","dispose","typeName","test","propertyNameOrMessage","source","destination","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}